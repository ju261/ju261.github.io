index.html:

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modernes Kanban Board V3</title> <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body> <div class="top-right-buttons">
        <button id="helpBtn" class="help-button" aria-label="Hilfe anzeigen">
             <i class="fas fa-question-circle"></i>
        </button>
        <button id="settingsBtn" class="settings-button" aria-label="Einstellungen öffnen">
            <i class="fas fa-cog"></i>
        </button>
    </div>

    <h1>Mein Kanban Board</h1>

    <div class="kanban-board" id="kanbanBoard">
        <div class="kanban-column">
            <h2>Zu erledigen</h2>
            <div class="cards" id="todo-cards" data-column-id="todo">
                <div class="card" id="card-1" draggable="true" data-description="Das gesamte Konzept für das Projekt muss noch ausgearbeitet werden. Details zu Zielgruppen und Monetarisierung fehlen noch.">
                    <span class="card-title">Konzept entwickeln</span>
                    <button class="delete-card-btn">&times;</button>
                </div>
                </div>
            <button class="add-card-btn" data-column="todo-cards">Neue Aufgabe +</button>
        </div>
        <div class="kanban-column">
             <h2>In Arbeit</h2>
             <div class="cards" id="inprogress-cards" data-column-id="inprogress">
                 <div class="card" id="card-4" draggable="true" data-description="Alle CSS-Regeln definieren und das Layout gestalten. Responsiveness beachten!">
                     <span class="card-title">CSS Styling erstellen</span>
                     <button class="delete-card-btn">&times;</button>
                 </div>
             </div>
              <button class="add-card-btn" data-column="inprogress-cards">Neue Aufgabe +</button>
         </div>
        <div class="kanban-column">
             <h2>Fertig</h2>
             <div class="cards" id="done-cards" data-column-id="done">
             </div>
              <button class="add-card-btn" data-column="done-cards">Neue Aufgabe +</button>
         </div>
    </div>

    <div id="modalOverlay" class="modal-overlay"></div>
    <div id="descriptionModal" class="modal">
        <button class="close desc-close">&times;</button> <h3 id="modalTitle">Aufgabenbeschreibung</h3>
        <div id="modalDescriptionDisplay" class="description-display"></div>
        <textarea id="modalDescriptionInput" rows="6" style="display: none;" placeholder="Füge hier eine detaillierte Beschreibung hinzu..."></textarea>
        <div class="modal-actions">
             <button id="editDescriptionBtn">Bearbeiten</button>
             <button id="saveDescriptionBtn" style="display: none;">Speichern</button>
        </div>
    </div>

    <div id="helpModalOverlay" class="modal-overlay"></div>
    <div id="helpModal" class="modal help-modal">
        <button class="close help-close">&times;</button>
        <h3>Anleitung</h3>
        <div class="help-content">
             <h4>Grundlagen</h4><ul><li><strong>Aufgaben verschieben:</strong> Klicken und ziehen Sie Aufgaben (Karten) per Drag & Drop zwischen den Spalten "Zu erledigen", "In Arbeit" und "Fertig".</li><li><strong>Details ansehen/bearbeiten:</strong> Machen Sie einen Doppelklick auf eine Aufgabe, um die Beschreibung anzuzeigen. Klicken Sie im Fenster auf "Bearbeiten", um den Text zu ändern, und dann auf "Speichern". Der Titel der Karte bleibt unverändert.</li></ul><h4>Aufgaben verwalten</h4><ul><li><strong>Neue Aufgabe erstellen:</strong> Klicken Sie auf den Button "Neue Aufgabe +" am unteren Ende der gewünschten Spalte und geben Sie einen Titel ein.</li><li><strong>Aufgabe löschen:</strong> Bewegen Sie den Mauszeiger über eine Aufgabe. Oben rechts erscheint ein kleines "×". Klicken Sie darauf und bestätigen Sie die Löschung.</li></ul><h4>Einstellungen</h4><ul><li><strong>Farbe anpassen:</strong> Klicken Sie auf das Zahnrad (<i class="fas fa-cog"></i>) oben rechts. Im Einstellungsfenster können Sie eine neue Akzentfarbe für das Board auswählen. Die Farbe wird gespeichert.</li><li><strong>Hilfe schließen:</strong> Klicken Sie auf das "×", irgendwo außerhalb dieses Fensters oder drücken Sie die Escape-Taste.</li></ul>
        </div>
    </div>

    <div id="settingsModalOverlay" class="modal-overlay"></div>
    <div id="settingsModal" class="modal settings-modal">
        <button class="close settings-close">&times;</button> <h3>Einstellungen</h3>
        <div class="settings-content">
            <div class="setting-item">
                <label for="colorPicker">Akzentfarbe:</label>
                <input type="color" id="colorPicker">
            </div>

            <div class="setting-item">
                 <fieldset>
                    <legend>Theme</legend>
                    <div class="radio-group">
                        <label>
                            <input type="radio" name="theme" value="light" id="themeLight"> Hell
                        </label>
                        <label>
                            <input type="radio" name="theme" value="dark" id="themeDark"> Dunkel
                        </label>
                    </div>
                 </fieldset>
            </div>
        </div>
         </div>
    <script src="script.js"></script>
</body>
</html>


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

style.css:

/* ========================================================================
   == Modernes Kanban Board - Finale Stylesheet (V6 - Mit Modal-Transitions) ==
   ======================================================================== */

/* --- CSS Variablen Definition --- */
:root {
    /* Helles Theme (Standard) */
    --bg-color: #f8f9fa;                /* Haupt-Hintergrund */
    --text-color: #343a40;              /* Haupt-Textfarbe */
    --text-muted-color: #6c757d;        /* Hellere Textfarbe */
    --border-color: #dee2e6;            /* Standard-Randfarbe */
    --border-color-light: #e9ecef;      /* Hellere Randfarbe */
    --column-bg: #ffffff;               /* Hintergrund der Spalten */
    --card-bg: #ffffff;                 /* Hintergrund der Karten */
    --card-shadow: rgba(0, 0, 0, 0.1);  /* Schattenfarbe für Karten */
    --panel-bg: #ffffff;                /* Hintergrund für Modals/Panels */
    --panel-shadow: rgba(0, 0, 0, 0.15);/* Schatten für Modals/Panels */
    --button-bg: #ffffff;               /* Hintergrund für Top-Buttons */
    --button-hover-bg: #e9ecef;         /* Hover-Hintergrund für Top-Buttons */
    --input-bg: #ffffff;                /* Hintergrund für Inputs */
    --input-border: #ced4da;            /* Randfarbe für Inputs */
    --accent-color: #0d6efd;            /* Akzentfarbe (Standard Blau) */
    --card-border-left: #adb5bd;        /* Linker Rand der Karten */
    --add-btn-bg: rgba(0, 0, 0, 0.05);
    --add-btn-text: #6c757d;
    --add-btn-border: #ced4da;
    --add-btn-hover-bg: rgba(13, 110, 253, 0.1);
    --delete-btn-text: #adb5bd;
    --delete-btn-hover-text: #dc3545;
    --delete-btn-hover-bg: rgba(220, 53, 69, 0.1);
    --modal-overlay-bg: rgba(0, 0, 0, 0.55);
    --desc-display-bg: #f8f9fa;
    --desc-display-border: #e9ecef;
    --desc-display-text: #495057;
    --fieldset-border: #dee2e6;

    /* Übergänge */
    --transition-speed: 0.3s; /* Einheitliche Übergangszeit */
    --transition-func: ease;
}

/* Dunkles Theme Variablen */
body.dark-mode {
    --bg-color: #212529;
    --text-color: #e9ecef;
    --text-muted-color: #adb5bd;
    --border-color: #495057;
    --border-color-light: #343a40;
    --column-bg: #343a40;
    --card-bg: #495057;
    --card-shadow: rgba(0, 0, 0, 0.4);
    --panel-bg: #343a40;
    --panel-shadow: rgba(0, 0, 0, 0.3);
    --button-bg: #495057;
    --button-hover-bg: #5a6268;
    --input-bg: #495057;
    --input-border: #6c757d;
    /* Akzentfarbe bleibt gleich, kann aber angepasst werden */
    /* --accent-color: #4dabf7; */
    --card-border-left: #6c757d;
    --add-btn-bg: rgba(255, 255, 255, 0.1);
    --add-btn-text: #adb5bd;
    --add-btn-border: #6c757d;
    --add-btn-hover-bg: rgba(13, 110, 253, 0.2);
    --delete-btn-text: #6c757d;
    --delete-btn-hover-text: #f17782;
    --delete-btn-hover-bg: rgba(220, 53, 69, 0.2);
    --modal-overlay-bg: rgba(0, 0, 0, 0.7);
    --desc-display-bg: #2c3034;
    --desc-display-border: #343a40;
    --desc-display-text: #adb5bd;
    --fieldset-border: #495057;
}


/* --- Grundlegende Stile --- */
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    background-color: var(--bg-color);
    color: var(--text-color);
    margin: 0;
    padding: 25px;
    line-height: 1.5;
    position: relative;
    transition: background-color var(--transition-speed) var(--transition-func), color var(--transition-speed) var(--transition-func);
}

/* --- Buttons oben rechts --- */
.top-right-buttons { position: fixed; top: 20px; right: 20px; display: flex; gap: 10px; z-index: 1050; }
.settings-button, .help-button {
    background-color: var(--button-bg); border: 1px solid var(--border-color); color: var(--text-muted-color); border-radius: 50%; width: 45px; height: 45px; font-size: 1.2em; cursor: pointer; box-shadow: 0 2px 8px var(--card-shadow); display: flex; align-items: center; justify-content: center;
    transition: background-color var(--transition-speed) var(--transition-func), box-shadow var(--transition-speed) var(--transition-func), color var(--transition-speed) var(--transition-func);
    padding: 0; line-height: 1;
}
.settings-button:hover, .help-button:hover { background-color: var(--button-hover-bg); box-shadow: 0 4px 12px var(--panel-shadow); color: var(--accent-color); }
.settings-button .fa-cog { transition: transform 0.4s ease-in-out; }
.settings-button:hover .fa-cog { transform: rotate(90deg); }
.help-button .fa-question-circle { transition: transform var(--transition-speed) var(--transition-func); }
.help-button:hover .fa-question-circle { transform: scale(1.1); }


/* --- Einstellungs-Panel (wird nicht mehr verwendet, Modal stattdessen) --- */
/* .settings-panel { ... } */


/* --- Haupttitel --- */
h1 { text-align: center; color: var(--accent-color); margin-top: 80px; margin-bottom: 40px; font-weight: 600; }

/* --- Kanban Board Layout --- */
.kanban-board { display: flex; gap: 25px; justify-content: center; align-items: flex-start; padding: 10px; flex-wrap: wrap; }
.kanban-column {
    background-color: var(--column-bg); border-radius: 10px; padding: 20px; width: 30%; min-width: 280px; max-width: 350px; box-shadow: 0 4px 12px var(--card-shadow); border: 1px solid var(--border-color-light); display: flex; flex-direction: column;
    transition: box-shadow var(--transition-speed) var(--transition-func), background-color var(--transition-speed) var(--transition-func), border-color var(--transition-speed) var(--transition-func);
}
.kanban-column h2 { margin-top: 0; font-size: 1.15em; font-weight: 600; color: var(--accent-color); padding-bottom: 15px; margin-bottom: 20px; text-align: center; position: relative; border-bottom: 1px solid var(--border-color-light); }
.kanban-column h2::after { content: ''; position: absolute; bottom: -1px; left: 50%; transform: translateX(-50%); width: 50px; height: 3px; background-color: var(--accent-color); border-radius: 2px; }
.cards {
    min-height: 100px; border-radius: 5px; padding-top: 5px; flex-grow: 1;
    transition: background-color var(--transition-speed) var(--transition-func), border-color var(--transition-speed) var(--transition-func);
}

/* --- Karten Styling --- */
.card {
    background-color: var(--card-bg); color: var(--text-color); padding: 12px 15px; margin-bottom: 12px; border-radius: 8px; box-shadow: 0 2px 5px var(--card-shadow); cursor: grab; font-size: 0.98em; border-left: 4px solid var(--card-border-left);
    transition: opacity var(--transition-speed) var(--transition-func), transform var(--transition-speed) var(--transition-func), box-shadow var(--transition-speed) var(--transition-func), border-left-color var(--transition-speed) var(--transition-func), background-color var(--transition-speed) var(--transition-func), color var(--transition-speed) var(--transition-func), z-index 0s ease 0.2s;
    overflow: hidden; position: relative; z-index: 1;
}
.card .card-title { display: block; font-weight: 500; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; padding-right: 25px; }
.card:hover { box-shadow: 0 6px 12px var(--panel-shadow); border-left-color: var(--accent-color); transform: scale(1.03); z-index: 10; }
.card:last-child { margin-bottom: 0; }
.card.dragging { opacity: 0.6; transform: scale(0.98) rotate(1deg); cursor: grabbing; box-shadow: 0 8px 20px var(--panel-shadow); z-index: 100; }
.cards.drag-over { background-color: rgba(13, 110, 253, 0.05); border: 1px dashed var(--accent-color); border-radius: 5px; }

/* --- Add/Delete Buttons --- */
.add-card-btn {
    margin-top: 15px; padding: 8px 10px; width: 100%; background-color: var(--add-btn-bg); color: var(--add-btn-text); border: 1px dashed var(--add-btn-border); border-radius: 5px; cursor: pointer; text-align: center; font-weight: 500;
    transition: background-color var(--transition-speed) var(--transition-func), color var(--transition-speed) var(--transition-func), border-color var(--transition-speed) var(--transition-func);
}
.add-card-btn:hover { background-color: var(--add-btn-hover-bg); color: var(--accent-color); border-color: var(--accent-color); }
.delete-card-btn {
    position: absolute; top: 5px; right: 5px; background: none; border: none; color: var(--delete-btn-text); font-size: 1.1em; font-weight: bold; cursor: pointer; padding: 2px 5px; line-height: 1; border-radius: 3px; opacity: 0; z-index: 5;
    transition: opacity var(--transition-speed) var(--transition-func), color var(--transition-speed) var(--transition-func), background-color var(--transition-speed) var(--transition-func);
}
.card:hover .delete-card-btn { opacity: 1; }
.delete-card-btn:hover { color: var(--delete-btn-hover-text); background-color: var(--delete-btn-hover-bg); }


/* --- Modal Styling (Allgemein & Transitions) --- */
.modal-overlay { /* Gilt für alle Overlays */
    position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: var(--modal-overlay-bg); z-index: 1000;
    opacity: 0; /* Startzustand */
    visibility: hidden; /* Startzustand */
    transition: opacity var(--transition-speed) var(--transition-func),
                visibility 0s linear var(--transition-speed); /* Sichtbarkeit verzögern */
}
.modal { /* Basis-Stile für alle Modals */
    position: fixed; top: 50%; left: 50%; background-color: var(--panel-bg); color: var(--text-color); padding: 25px 30px; border-radius: 10px; box-shadow: 0 5px 20px var(--panel-shadow); z-index: 1010; width: 90%; max-width: 500px; display: flex; flex-direction: column; max-height: 85vh; border: 1px solid var(--border-color);
    opacity: 0; /* Startzustand */
    visibility: hidden; /* Startzustand */
    transform: translate(-50%, -50%) scale(0.95); /* Startzustand (zentriert, leicht verkleinert) */
    transition: opacity var(--transition-speed) var(--transition-func),
                transform var(--transition-speed) var(--transition-func),
                visibility 0s linear var(--transition-speed), /* Sichtbarkeit verzögern */
                background-color var(--transition-speed) var(--transition-func),
                color var(--transition-speed) var(--transition-func),
                border-color var(--transition-speed) var(--transition-func);
}
/* Sichtbarer Zustand für Modal & Overlay */
.modal.visible,
.modal-overlay.visible {
    opacity: 1;
    visibility: visible;
    transform: translate(-50%, -50%) scale(1); /* Endzustand (normale Größe, zentriert) */
    transition-delay: 0s; /* Keine Verzögerung beim Einblenden */
}
/* Sicherstellen, dass Overlay keinen Scale-Transform hat */
.modal-overlay.visible {
    transform: none; /* Überschreibt pot. geerbten Transform */
}

/* Allgemeine Modal Inhalte */
.modal h3 { margin-top: 0; margin-bottom: 15px; color: var(--text-color); text-align: center; flex-shrink: 0; }
.modal button.close { position: absolute; top: 10px; right: 15px; background: none; border: none; font-size: 1.8em; color: var(--text-muted-color); cursor: pointer; line-height: 1; padding: 0; transition: color var(--transition-speed) var(--transition-func); }
.modal button.close:hover { color: var(--text-color); }

/* --- Beschreibungs-Modal --- */
#descriptionModal .description-display { background-color: var(--desc-display-bg); border: 1px solid var(--desc-display-border); border-radius: 5px; padding: 10px 15px; min-height: 80px; margin-bottom: 15px; white-space: pre-wrap; word-wrap: break-word; overflow-y: auto; flex-grow: 1; color: var(--desc-display-text); transition: background-color var(--transition-speed) var(--transition-func), color var(--transition-speed) var(--transition-func), border-color var(--transition-speed) var(--transition-func); }
#descriptionModal textarea#modalDescriptionInput { width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid var(--input-border); background-color: var(--input-bg); color: var(--text-color); border-radius: 5px; font-family: inherit; font-size: 1em; resize: vertical; box-sizing: border-box; min-height: 80px; display: none; flex-grow: 1; transition: background-color var(--transition-speed) var(--transition-func), color var(--transition-speed) var(--transition-func), border-color var(--transition-speed) var(--transition-func); }
#descriptionModal .modal-actions { display: flex; justify-content: flex-end; gap: 10px; margin-top: 10px; flex-shrink: 0; }
#descriptionModal button { padding: 10px 15px; border: none; border-radius: 5px; cursor: pointer; font-weight: 500; transition: background-color var(--transition-speed) var(--transition-func), box-shadow var(--transition-speed) var(--transition-func), filter var(--transition-speed) var(--transition-func); }
#descriptionModal button#editDescriptionBtn { background-color: var(--text-muted-color); color: var(--panel-bg); }
#descriptionModal button#editDescriptionBtn:hover { filter: brightness(90%); box-shadow: 0 2px 5px var(--card-shadow); }
#descriptionModal button#saveDescriptionBtn { background-color: var(--accent-color); color: white; display: none; }
#descriptionModal button#saveDescriptionBtn:hover { filter: brightness(90%); box-shadow: 0 2px 5px var(--card-shadow); }

/* --- Hilfe-Modal --- */
#helpModal { max-width: 650px; z-index: 1011; }
#helpModal .help-content { overflow-y: auto; flex-grow: 1; font-size: 0.95em; line-height: 1.6; padding-right: 10px; }
#helpModal .help-content h4 { margin-top: 15px; margin-bottom: 8px; color: var(--accent-color); border-bottom: 1px solid var(--border-color-light); padding-bottom: 5px; font-weight: 600; }
#helpModal .help-content h4:first-of-type { margin-top: 0; }
#helpModal .help-content ul { list-style: disc; padding-left: 25px; margin-bottom: 15px; }
#helpModal .help-content li { margin-bottom: 8px; }
#helpModal .help-content strong { font-weight: 600; color: var(--text-color); }
#helpModal .help-content i { color: var(--accent-color); margin: 0 2px; font-size: 1.1em; vertical-align: middle; }

/* --- Einstellungs-Modal --- */
#settingsModal { max-width: 400px; z-index: 1012; }
#settingsModal .settings-content { display: flex; flex-direction: column; gap: 25px; /* Mehr Abstand */ flex-grow: 1; overflow-y: auto; padding: 10px 0; }
#settingsModal .setting-item { display: flex; flex-direction: column; gap: 8px; }
#settingsModal .setting-item label:not([class*="radio-group"] label) { font-weight: 500; color: var(--text-muted-color); font-size: 0.9em; margin-bottom: 4px; }
#settingsModal input[type="color"] { width: 100%; height: 35px; border: 1px solid var(--input-border); border-radius: 4px; cursor: pointer; padding: 2px; box-sizing: border-box; background-color: var(--input-bg); }
#settingsModal fieldset { border: 1px solid var(--fieldset-border); border-radius: 5px; padding: 15px; margin: 0; transition: border-color var(--transition-speed) var(--transition-func); }
#settingsModal legend { font-weight: 500; padding: 0 8px; color: var(--text-muted-color); font-size: 0.9em; transition: color var(--transition-speed) var(--transition-func); }
#settingsModal .radio-group { display: flex; gap: 20px; justify-content: flex-start; /* Besser linksbündig */ padding-left: 5px; }
#settingsModal .radio-group label { display: flex; align-items: center; gap: 8px; cursor: pointer; font-size: 1em; color: var(--text-color); transition: color var(--transition-speed) var(--transition-func); }
#settingsModal input[type="radio"] { cursor: pointer; accent-color: var(--accent-color); /* Passt Radio-Button Farbe an Akzent an (moderne Browser) */ width: 16px; height: 16px; } /* Größe explizit setzen */

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

script.js:

// ========================================================================
// == Modernes Kanban Board - Komplettes JavaScript (V6 - Mit Modal-Transitions) ==
// ========================================================================

document.addEventListener('DOMContentLoaded', () => {

    // --- Globale Variablen und Element-Referenzen ---
    const kanbanBoard = document.getElementById('kanbanBoard');
    // Beschreibungs-Modal
    const modal = document.getElementById('descriptionModal');
    const modalOverlay = document.getElementById('modalOverlay');
    const descriptionDisplay = document.getElementById('modalDescriptionDisplay');
    const descriptionInput = document.getElementById('modalDescriptionInput');
    const editDescriptionBtn = document.getElementById('editDescriptionBtn');
    const saveDescriptionBtn = document.getElementById('saveDescriptionBtn');
    const descModalCloseBtn = modal ? modal.querySelector('.desc-close') : null;
    // Hilfe-Modal
    const helpBtn = document.getElementById('helpBtn');
    const helpModal = document.getElementById('helpModal');
    const helpModalOverlay = document.getElementById('helpModalOverlay');
    const helpModalCloseBtn = helpModal ? helpModal.querySelector('.help-close') : null;
    // Einstellungen-Modal
    const settingsBtn = document.getElementById('settingsBtn');
    const settingsModal = document.getElementById('settingsModal');
    const settingsModalOverlay = document.getElementById('settingsModalOverlay');
    const settingsModalCloseBtn = settingsModal ? settingsModal.querySelector('.settings-close') : null;
    const colorPicker = document.getElementById('colorPicker');
    const themeLightRadio = document.getElementById('themeLight');
    const themeDarkRadio = document.getElementById('themeDark');

    let draggedCard = null;
    let currentCardId = null;

    // --- Sicherheitschecks ---
    if (!kanbanBoard) console.error("FEHLER: 'kanbanBoard' nicht gefunden!");
    if (!modal || !modalOverlay || !descriptionDisplay || !descriptionInput || !editDescriptionBtn || !saveDescriptionBtn || !descModalCloseBtn) console.error("FEHLER: Elemente des Beschreibungs-Modals fehlen!");
    if (!helpBtn || !helpModal || !helpModalOverlay || !helpModalCloseBtn) console.warn("WARNUNG: Hilfe-Elemente fehlen.");
    if (!settingsBtn || !settingsModal || !settingsModalOverlay || !settingsModalCloseBtn || !colorPicker || !themeLightRadio || !themeDarkRadio) console.warn("WARNUNG: Einstellungs-Elemente fehlen.");


    // ====================================================================
    // == Drag & Drop Funktionalität                                     ==
    // ====================================================================
    function addDragDropListeners(card) { if (!card) return; card.addEventListener('dragstart', handleDragStart); card.addEventListener('dragend', handleDragEnd); }
    function handleDragStart(event) { if (!event.target.classList?.contains('card')) return; draggedCard = event.target; setTimeout(() => { if (draggedCard) draggedCard.classList.add('dragging'); }, 0); event.dataTransfer.setData('text/plain', event.target.id); event.dataTransfer.effectAllowed = 'move'; }
    function handleDragEnd(event) { if (event.target.classList?.contains('card')) { event.target.classList.remove('dragging'); } if (draggedCard) { draggedCard.classList.remove('dragging'); } draggedCard = null; document.querySelectorAll('.cards.drag-over').forEach(c => c.classList.remove('drag-over')); }
    if (kanbanBoard) {
        kanbanBoard.addEventListener('dragover', (event) => { const targetColumn = event.target.closest('.cards'); if (targetColumn && draggedCard) { event.preventDefault(); targetColumn.classList.add('drag-over'); event.dataTransfer.dropEffect = 'move'; } });
        kanbanBoard.addEventListener('dragenter', (event) => { const targetColumn = event.target.closest('.cards'); if (targetColumn && draggedCard) event.preventDefault(); });
        kanbanBoard.addEventListener('dragleave', (event) => { const targetColumn = event.target.closest('.cards'); const relatedTargetIsOutside = !event.relatedTarget || !targetColumn?.contains(event.relatedTarget); if (targetColumn && relatedTargetIsOutside) { targetColumn.classList.remove('drag-over'); } });
        kanbanBoard.addEventListener('drop', (event) => { event.preventDefault(); const targetColumn = event.target.closest('.cards'); if (targetColumn && draggedCard) { targetColumn.classList.remove('drag-over'); if (targetColumn !== draggedCard.parentElement) { targetColumn.appendChild(draggedCard); console.log(`Karte ${draggedCard.id} nach ${targetColumn.id} verschoben.`); } } });
    }
    document.querySelectorAll('.card').forEach(addDragDropListeners);


    // ====================================================================
    // == Aufgaben hinzufügen / löschen                                  ==
    // ====================================================================
    function createCardElement(id, title, description = '') { const card = document.createElement('div'); card.classList.add('card'); card.id = id; card.draggable = true; card.dataset.description = description || title; const cardTitle = document.createElement('span'); cardTitle.classList.add('card-title'); cardTitle.textContent = title; const deleteBtn = document.createElement('button'); deleteBtn.classList.add('delete-card-btn'); deleteBtn.innerHTML = '&times;'; deleteBtn.setAttribute('aria-label', 'Aufgabe löschen'); card.appendChild(cardTitle); card.appendChild(deleteBtn); addDragDropListeners(card); return card; }
    if (kanbanBoard) {
        kanbanBoard.addEventListener('click', (event) => {
            if (event.target.classList.contains('add-card-btn')) { const targetColumnId = event.target.dataset.column; const targetColumnElement = document.getElementById(targetColumnId); if (targetColumnElement) { const cardTitle = prompt("Titel der neuen Aufgabe:"); if (cardTitle && cardTitle.trim() !== "") { const newCardId = `card-${Date.now()}`; const newCard = createCardElement(newCardId, cardTitle.trim()); targetColumnElement.appendChild(newCard); console.log(`Karte ${newCardId} zur Spalte ${targetColumnId} hinzugefügt.`); } } else { console.error(`FEHLER: Zielspalte mit ID '${targetColumnId}' nicht gefunden.`); } }
            if (event.target.classList.contains('delete-card-btn')) { const cardToDelete = event.target.closest('.card'); if (cardToDelete) { const cardTitleText = cardToDelete.querySelector('.card-title')?.textContent || 'diese Aufgabe'; if (confirm(`Möchtest du "${cardTitleText}" wirklich löschen?`)) { const cardId = cardToDelete.id; cardToDelete.remove(); console.log(`Karte ${cardId} gelöscht.`); } } }
        });
    }


    // ====================================================================
    // == Beschreibungs-Modal (Anzeigen / Bearbeiten)                    ==
    // ====================================================================
    function setModalToViewMode(description) { if (!descriptionDisplay || !descriptionInput || !editDescriptionBtn || !saveDescriptionBtn || !modal) return; descriptionDisplay.textContent = description || 'Keine Beschreibung vorhanden.'; descriptionDisplay.style.display = 'block'; descriptionInput.style.display = 'none'; editDescriptionBtn.style.display = 'inline-block'; saveDescriptionBtn.style.display = 'none'; modal.dataset.mode = 'view'; }
    function setModalToEditMode() { if (!descriptionDisplay || !descriptionInput || !editDescriptionBtn || !saveDescriptionBtn || !modal) return; const currentDescription = descriptionDisplay.textContent === 'Keine Beschreibung vorhanden.' ? '' : descriptionDisplay.textContent; descriptionInput.value = currentDescription; descriptionDisplay.style.display = 'none'; descriptionInput.style.display = 'block'; editDescriptionBtn.style.display = 'none'; saveDescriptionBtn.style.display = 'inline-block'; modal.dataset.mode = 'edit'; descriptionInput.focus(); }
    function closeDescriptionModal() { if (!modal || !modalOverlay) return; modal.classList.remove('visible'); modalOverlay.classList.remove('visible'); setTimeout(() => { if (modal.dataset.mode !== 'view') setModalToViewMode(''); currentCardId = null; }, 300); /* Reset nach Transition */ } // Reset leicht verzögert
    if (kanbanBoard) { kanbanBoard.addEventListener('dblclick', (event) => { const clickedCard = event.target.closest('.card'); if (clickedCard) { if (!modal || !modalOverlay) { console.error("Beschreibungs-Modal Elemente fehlen."); return; } currentCardId = clickedCard.id; const currentDescription = clickedCard.dataset.description || ''; setModalToViewMode(currentDescription); modal.classList.add('visible'); modalOverlay.classList.add('visible'); } }); }
    if (editDescriptionBtn) editDescriptionBtn.addEventListener('click', setModalToEditMode);
    if (saveDescriptionBtn) { saveDescriptionBtn.addEventListener('click', () => { if (currentCardId) { const cardToUpdate = document.getElementById(currentCardId); if (cardToUpdate && descriptionInput) { const newDescription = descriptionInput.value.trim(); cardToUpdate.dataset.description = newDescription; console.log(`Beschreibung für ${currentCardId} gespeichert.`); } } closeDescriptionModal(); }); }
    if (descModalCloseBtn) descModalCloseBtn.addEventListener('click', closeDescriptionModal);
    if (modalOverlay) modalOverlay.addEventListener('click', closeDescriptionModal);


    // ====================================================================
    // == Hilfe-Modal Funktionalität                                     ==
    // ====================================================================
    function closeHelpModal() { if (!helpModal || !helpModalOverlay) return; helpModal.classList.remove('visible'); helpModalOverlay.classList.remove('visible'); }
    if (helpBtn) { helpBtn.addEventListener('click', () => { closeDescriptionModal(); closeSettingsModal(); if (helpModal && helpModalOverlay) { helpModal.classList.add('visible'); helpModalOverlay.classList.add('visible'); } else { console.error("Hilfe-Modal Elemente fehlen."); } }); }
    if (helpModalCloseBtn) helpModalCloseBtn.addEventListener('click', closeHelpModal);
    if (helpModalOverlay) helpModalOverlay.addEventListener('click', closeHelpModal);


    // ====================================================================
    // == Einstellungs-Modal & Theme/Farb-Logik                          ==
    // ====================================================================
    function closeSettingsModal() { if (!settingsModal || !settingsModalOverlay) return; settingsModal.classList.remove('visible'); settingsModalOverlay.classList.remove('visible'); }
    function applySavedTheme() { const savedTheme = localStorage.getItem('kanbanTheme') || 'light'; if (savedTheme === 'dark') { document.body.classList.add('dark-mode'); if(themeDarkRadio) themeDarkRadio.checked = true; } else { document.body.classList.remove('dark-mode'); if(themeLightRadio) themeLightRadio.checked = true; } console.log(`Theme angewendet: ${savedTheme}`); }
    function applySavedColor() { if (!colorPicker) return; const savedColor = localStorage.getItem('kanbanAccentColor'); const defaultColor = getComputedStyle(document.documentElement).getPropertyValue('--accent-color').trim(); const colorToApply = savedColor || defaultColor; document.documentElement.style.setProperty('--accent-color', colorToApply); colorPicker.value = colorToApply; }
    if (settingsBtn) { settingsBtn.addEventListener('click', () => { closeDescriptionModal(); closeHelpModal(); if (settingsModal && settingsModalOverlay) { applySavedTheme(); applySavedColor(); /* Farben/Theme aktualisieren vor Anzeige */ settingsModal.classList.add('visible'); settingsModalOverlay.classList.add('visible'); } else { console.error("Einstellungs-Modal Elemente fehlen."); } }); }
    if (settingsModalCloseBtn) settingsModalCloseBtn.addEventListener('click', closeSettingsModal);
    if (settingsModalOverlay) settingsModalOverlay.addEventListener('click', closeSettingsModal);
    function handleThemeChange(event) { const selectedTheme = event.target.value; if (selectedTheme === 'dark') { document.body.classList.add('dark-mode'); } else { document.body.classList.remove('dark-mode'); } localStorage.setItem('kanbanTheme', selectedTheme); console.log(`Theme geändert zu: ${selectedTheme}`); }
    if (themeLightRadio) themeLightRadio.addEventListener('change', handleThemeChange);
    if (themeDarkRadio) themeDarkRadio.addEventListener('change', handleThemeChange);
    if (colorPicker) { colorPicker.addEventListener('input', (event) => { const newColor = event.target.value; document.documentElement.style.setProperty('--accent-color', newColor); localStorage.setItem('kanbanAccentColor', newColor); }); }
    applySavedTheme(); applySavedColor(); // Beim Start ausführen


    // ====================================================================
    // == Globaler Escape-Key Listener (Schließt oberstes Modal/Panel)  ==
    // ====================================================================
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
            if (settingsModal?.classList.contains('visible')) { closeSettingsModal(); }
            else if (helpModal?.classList.contains('visible')) { closeHelpModal(); }
            else if (modal?.classList.contains('visible') && document.activeElement !== descriptionInput) { closeDescriptionModal(); }
        }
    });

    console.log("Kanban Board Script V6 (mit Modal-Transitions) geladen.");

}); // Ende DOMContentLoaded